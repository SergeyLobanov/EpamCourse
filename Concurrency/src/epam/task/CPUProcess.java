package epam.task;

/**
 * Created by Сергей on 03.07.2016.
 */
public class CPUProcess extends Thread {
    /**
     * queue that store generated by CPUProcess processes
     */
    private CPUQueue cpuQueue;
    /**
     * range to generate time of creating for processes
     */
    private long lowTimeValue;
    private long highTimeValue;
    /**
     * number of destroyed processes
     */
    private int counterOfDestroyedProcesses;
    /**
     * number of generated processes by all CPUProcesses
     */
    private static int counterOfGeneratedProcesses;

    public CPUProcess(CPUQueue cpuQueue, long lowTimeValue, long highTimeValue) {
        this.cpuQueue = cpuQueue;
        this.lowTimeValue = lowTimeValue;
        this.highTimeValue = highTimeValue;
    }

    @Override
    public void run() {
        int i = 30;
        int k = 0;
        try {
            //while(true) {
            while(k++ < i) {
                long serveTime = 200;//todo:(long)(lowTimeValue + (highTimeValue - lowTimeValue + 1) * Math.random());
                sleep(serveTime);
                if (cpuQueue.getSize() < cpuQueue.getMaxSize()) {
                    cpuQueue.push(new String(""+k)); //todo: create process
                    counterOfGeneratedProcesses++;
                } else {
                    //todo: destroy process
                    counterOfDestroyedProcesses++;
                }
                System.out.println("proc k " + k);
            }
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }
    }

    public int getCounterOfDestroyedProcesses() {
        return counterOfDestroyedProcesses;
    }

    public static int getCounterOfGeneratedProcesses() {
        return counterOfGeneratedProcesses;
    }
}
